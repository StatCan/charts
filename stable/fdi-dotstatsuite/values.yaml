# Default values for dotstatsuite.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Globals

nameOverride: ""
fullnameOverride: ""
managed:
  azuread:
    tokenUrl: ""
    authority: ""
    authorizationUrl: ""
    clientId: ""
  database:
    server: ""
    sapassword: ""
    password: ""
    sa_user: ""
  smtp:
    username: ""
    password: ""
    host: ""
    port: "587"
    enableSsl: "true"
    mailFrom: ""

image: &image
  repository: &repository siscc/sdmxri-nsi-maapi
  pullPolicy: &pullPolicy Always
  tag: &tag master
  ## add tag version

dbup: &dbup
  image:
    repository: &repository siscc/dotstatsuite-dbup
    pullPolicy: &pullPolicy Always
    tag: &tag master

# Authz
# https://gitlab.com/sis-cc/.stat-suite/dotstatsuite-kube-core-rp/-/blob/master/staging/authz.yaml
authz:
  enabled: true
  replicaCount: 1

  common_db: "commonDb"
  common_user: "commonUser"
  read_only_user: "readOnlyUser"

  ingress:
    enabled: true
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      kubernetes.io/ingress.class: istio
    hosts:
      - host: authz-siscc.redpelicans.com
        paths:
          - '/*'
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  image:
    repository: siscc/dotstatsuite-core-auth-management
    pullPolicy: Always
    # Overrides the image tag whose default is the chart version.
    tag: "master"

  dbup: *dbup

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    name: ""
    type: ClusterIP
    port: 80

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  ##
  imagePullSecrets:
    - name: registry-pull-secret

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

# NSI RESET
# https://gitlab.com/sis-cc/.stat-suite/dotstatsuite-kube-core-rp/-/tree/master/staging
#fdiResetCcei:
nsiReset:
  enabled: true
  replicaCount: 1

  dataspace: "reset"
  reset_data_db: sdmxResetDataDb
  reset_data_user: sdmxResetDataUser
  reset_structure_db: sdmxResetStructureDb
  reset_structure_user: sdmxResetStructureUser

  ingress:
    enabled: true
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      kubernetes.io/ingress.class: istio
    hosts:
      - host: fdi-reset-ccei.redpelicans.com
        paths:
          - '/*'
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  image: *image
  dbup: *dbup

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  ##
  imagePullSecrets:
    - name: registry-pull-secret

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

# NSI STABLE
# https://gitlab.com/sis-cc/.stat-suite/dotstatsuite-kube-core-rp/-/blob/master/staging/nsi-stable-siscc.yaml
#fdiStableCcei:
nsiStable:
  enabled: true
  replicaCount: 1

  dataspace: "stable"
  stable_data_db: sdmxStableDataDb
  stable_data_user: sdmxStableDataUser
  stable_structure_db: sdmxStableStructureDb
  stable_structure_user: sdmxStableStructureUser

  ingress:
    enabled: true
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      kubernetes.io/ingress.class: istio
    hosts:
      - host: fdi-stable-ccei.redpelicans.com
        paths:
          - '/*'
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  image: *image
  dbup: *dbup

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  ##
  imagePullSecrets:
    - name: registry-pull-secret

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

# NSI DESIGN
# https://gitlab.com/sis-cc/.stat-suite/dotstatsuite-kube-core-rp/-/blob/master/staging/nsi-design-oecd.yaml
nsiDesign:
  enabled: true
  replicaCount: 1

  dataspace: "design"
  design_data_db: sdmxDesignDataDb
  design_data_user: sdmxDesignDataUser
  design_structure_db: sdmxDesignStructureDb
  design_structure_user: sdmxDesignStructureUser

  ingress:
    enabled: true
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      kubernetes.io/ingress.class: istio
    hosts:
      - host: fdi-design-ccei.redpelicans.com
        paths:
          - '/*'
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  image: *image
  dbup: *dbup

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  ##
  imagePullSecrets:
    - name: registry-pull-secret

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

# NSI STAGING
# https://gitlab.com/sis-cc/.stat-suite/dotstatsuite-kube-core-rp/-/blob/master/staging/nsi-staging-oecd.yaml
nsiStaging:
  enabled: true
  replicaCount: 1

  dataspace: "staging"
  staging_data_db: sdmxStagingDataDb
  staging_data_user: sdmxStagingDataUser
  staging_structure_db: sdmxStagingStructureDb
  staging_structure_user: sdmxStagingStructureUser

  ingress:
    enabled: true
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      kubernetes.io/ingress.class: istio
    hosts:
      - host: fdi-staging-ccei.redpelicans.com
        paths:
          - '/*'
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  image: *image
  dbup: *dbup

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  ##
  imagePullSecrets:
    - name: registry-pull-secret

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}


# Transfer
# https://gitlab.k8s.cloud.statcan.ca/analytics-platform/discovery/dotstatsuite-docker-compose
transfer:
  enabled: true
  replicaCount: 1


  ingress:
    enabled: true
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      kubernetes.io/ingress.class: istio
    hosts:
      - host: fdi-transfer-sdmx.redpelicans.com
        paths:
          - '/*'
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  image:
    repository: siscc/dotstatsuite-core-transfer
    pullPolicy: Always
    # Overrides the image tag whose default is the chart version.
    tag: "master"

  dbup: *dbup

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  ##
  imagePullSecrets:
    - name: registry-pull-secret

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

# MSSQL for Linux
# https://github.com/helm/charts/tree/master/stable/mssql-linux
mssql-linux:
  enabled: false

  annotations:
    sidecar.istio.io/inject: "false"
  acceptEula:
    value: "y"
  edition:
    value: Express
  collation: SQL_Latin1_General_CP1_CI_AS
  lcid: 1033
  hadr: 0
  # Override sapassword in templates/secret.yaml
  sapassword: ""
  image:
    repository: microsoft/mssql-server-linux
    tag: 2017-CU11
    pullPolicy: IfNotPresent
  service:
    name: ""
    type: ClusterIP
    port: 1433
    # annotations:
    #   service.beta.kubernetes.io/azure-load-balancer-internal: "true"
  persistence:
    enabled: true
    # existingDataClaim:
    # existingTransactionLogClaim:
    # existingBackupClaim:
    # existingMasterClaim:
    storageClass: ""
    dataAccessMode: ReadWriteOnce
    dataSize: 10Gi
    transactionLogAccessMode: ReadWriteOnce
    transactionLogSize: 10Gi
    backupAccessMode: ReadWriteOnce
    backupSize: 1Gi
    masterAccessMode: ReadWriteOnce
    masterSize: 1Gi
  livenessprobe:
    initialDelaySeconds: 15
    periodSeconds: 20
  readinessprobe:
    initialDelaySeconds: 5
    periodSeconds: 10
  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 2Gi
    # requests:
    #  cpu: 100m
    #  memory: 2Gi
  nodeSelector:
    beta.kubernetes.io/os: linux

# Destination Rule
# https://gitlab.k8s.cloud.statcan.ca/analytics-platform/discovery/dotstatsuite-docker-compose
destinationRule:
  enabled: false
  mode: DISABLE
