apiVersion: v1
kind: Secret
metadata:
  name: {{ include "vetting-app.fullname" . }}-{{ .Values.configmodulePy.name }}-secret
  labels:
    app.kubernetes.io/name: {{ include "vetting-app.fullname" . }}
    helm.sh/chart: {{ include "vetting-app.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    
type: Opaque
stringData:
  configmodule.py: |-
    class Config:
{{- if .Values.external.enabled }}
      SQLALCHEMY_DATABASE_URI = "postgresql://{{ .Values.external.postgresqlUsername }}:{{ .Values.external.postgresqlPassword }}@{{ .Values.external.host }}:{{ .Values.external.port }}/{{ .Values.external.postgresqlDatabase }}"
{{- else if .Values.postgresql.enabled }}
      SQLALCHEMY_DATABASE_URI = "postgresql://{{ .Values.postgresql.postgresqlUsername }}:{{ .Values.postgresql.postgresqlPassword }}@{{ .Release.Name }}-postgresql:5432/{{ .Values.postgresql.postgresqlDatabase }}"
{{- end }}
      SQLALCHEMY_TRACK_MODIFICATIONS = "False"
      SECRET_KEY = "{{ .Values.configmodulePy.secretKey }}"
      
      SESSION_TYPE="sqlalchemy"
      PERMANENT_SESSION_LIFETIME=1200
      SESSION_USE_SIGNER=True
      SESSION_SQLALCHEMY_TABLE="Sessions"
      EMAIL_ENABLE_NOTIFICATIONS={{ .Values.configmodulePy.emailEnableNotifications }}
      EMAIL_STMP_SERVER="{{ .Values.configmodulePy.smtpServer }}"
      EMAIL_USERNAME="{{ .Values.configmodulePy.emailUsername }}"
      EMAIL_PASSWORD="{{ .Values.configmodulePy.emailPassword }}"
      EMAIL_SENDER_EMAIL="{{ .Values.configmodulePy.senderEmail }}"
      EMAIL_RECEIVER_EMAIL="{{ .Values.configmodulePy.emailReceiverEmail }}"
      EMAIL_PORT=25

      CLIENT_SECRET = "{{ .Values.configmodulePy.clientSecret }}"

      CLIENT_ID = "{{ .Values.configmodulePy.clientID }}"
      TENANT_ID="{{ .Values.configmodulePy.tenantID }}"

      STORAGE_ANALYST_NAME = "{{ .Values.configmodulePy.storageAnalystName }}"
      STORAGE_ANALYST_RESOURCE_GROUP = "{{ .Values.configmodulePy.storageAnalystResourceGroup }}"
      STORAGE_RESEARCHER_NAME = "{{ .Values.configmodulePy.storageResearcherName }}"
      STORAGE_RESEARCHER_RESOURCE_GROUP = "{{ .Values.configmodulePy.storageResearcherResourceGroup }}"

      AUTHORITY = "https://login.microsoftonline.com/{{ .Values.configmodulePy.tenantID }}"
      LOGOUT="https://login.microsoftonline.com/{{ .Values.configmodulePy.tenantID }}/oauth2/v2.0/logout"

      ENDPOINT = 'https://graph.microsoft.com/v1.0/users'
      SCOPE = ["api://{{ .Values.configmodulePy.clientID }}/Vetting.Access"]
      APP_RELEASE_DATE="{{ .Values.configmodulePy.appReleaseDate }}"
      APP_RELEASE_HASH="{{ .Values.configmodulePy.appReleaseHash }}"
      APP_RELEASE_VERSION="{{ .Values.configmodulePy.appReleaseVersion }}"

      ELASTIC_SEARCH_URL="{{ .Values.configmodulePy.elasticSearchUrl }}"
      ELASTIC_SEARCH_USERNAME="{{ .Values.configmodulePy.elasticSearchUsername }}"
      ELASTIC_SEARCH_PASSWORD="{{ .Values.configmodulePy.elasticSearchPassword }}"

      ELASTIC_SEARCH_LOGS_INDEX="{{ .Values.configmodulePy.elasticSearchLogsIndex }}"
      ELASTIC_SEARCH_ERRORS_INDEX="{{ .Values.configmodulePy.elasticSearchErrorsIndex }}"
    
    class ProductionConfig(Config):
{{- if .Values.external.enabled }}
      SQLALCHEMY_DATABASE_URI = "postgresql://{{ .Values.external.postgresqlUsername }}:{{ .Values.external.postgresqlPassword }}@{{ .Values.external.host }}:{{ .Values.external.port }}/{{ .Values.external.postgresqlDatabase }}"
{{- else if .Values.postgresql.enabled }}
      SQLALCHEMY_DATABASE_URI = "postgresql://{{ .Values.postgresql.postgresqlUsername }}:{{ .Values.postgresql.postgresqlPassword }}@{{ .Release.Name }}-postgresql:5432/{{ .Values.postgresql.postgresqlDatabase }}"
{{- end }}
