# Default values for prometheus-operator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# backendStore -- Either a filepath, a database or the default value. At present, postgres is the only database engine supported by the official image. Should you want to connect to any other database, please refer to the README.
backendStore:
  # backendStore.filepath -- A local or remote filesystem path (e.g. /mnt/persistent-disk)
  filepath:
  # backendStore.postgres -- A map with the values for (username, password, host, port and database).
  postgres:
  #   username:
  #   password:
  #   host:
  #   port:
  #   database:

# defaultArtifactRoot -- A local or remote filepath (e.g. s3://my-bucket). It is mandatory when specifying a database backend store
defaultArtifactRoot:

# extraArgs -- A map of arguments and values to pass to the `mlflow server` command
extraArgs: {}
  # workers: 2
  # expose-prometheus: yes

replicaCount: 1

image:
  pullPolicy: IfNotPresent
  # image.repository -- The fully qualified name of the docker image to use
  repository: k8scc01covidacr.azurecr.io/mlflow
  # image.tag -- The tag for the repository (e.g. 'latest')
  tag: "1.7.2"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # serviceAccount.create -- Specifies whether a service account should be created
  create: true
  # serviceAccount.annotations -- Annotations to add to the service account
  annotations: {}
  # serviceAccount.name -- The name of the service account to use. If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 5000

azure:
  enabled: false
  storageaccountartifact: ""
  storageaccountkey: ""

destinationRule:
  enabled: true
  mode: DISABLE

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: istio
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      # ingress.hosts[0].paths -- A list of objects. Each object should contain a `path` key, and may contain a `serviceNameOverride` and a `servicePortOverride` key. If you do not specify any overrides, the Chart will use the ones for the service it creates automatically. We allow overrides to allow advanced behavior like SSL redirection on the AWS ALB Ingress Controller.
      paths:
        - "/*"
        #   serviceNameOverride: chart-example
        #   servicePortOverride: 80
  pathType: "ImplementationSpecific"
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

persistence:
  enabled: false
  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:

  ## Data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  annotations: {}
  accessMode: ReadWriteOnce
  size: 8Gi

volumes: {}
#  - name: nothing
#    emptyDir: {}
volumeMounts: {}
#  - mountPath: /var/nothing
#    name: nothing
#    readOnly: true

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
